// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: nlp_services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SentimentAnalysisClient is the client API for SentimentAnalysis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SentimentAnalysisClient interface {
	AnalyzeText(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*SentimentResponse, error)
}

type sentimentAnalysisClient struct {
	cc grpc.ClientConnInterface
}

func NewSentimentAnalysisClient(cc grpc.ClientConnInterface) SentimentAnalysisClient {
	return &sentimentAnalysisClient{cc}
}

func (c *sentimentAnalysisClient) AnalyzeText(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*SentimentResponse, error) {
	out := new(SentimentResponse)
	err := c.cc.Invoke(ctx, "/customer_feedback.SentimentAnalysis/AnalyzeText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SentimentAnalysisServer is the server API for SentimentAnalysis service.
// All implementations must embed UnimplementedSentimentAnalysisServer
// for forward compatibility
type SentimentAnalysisServer interface {
	AnalyzeText(context.Context, *TextRequest) (*SentimentResponse, error)
	mustEmbedUnimplementedSentimentAnalysisServer()
}

// UnimplementedSentimentAnalysisServer must be embedded to have forward compatible implementations.
type UnimplementedSentimentAnalysisServer struct {
}

func (UnimplementedSentimentAnalysisServer) AnalyzeText(context.Context, *TextRequest) (*SentimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeText not implemented")
}
func (UnimplementedSentimentAnalysisServer) mustEmbedUnimplementedSentimentAnalysisServer() {}

// UnsafeSentimentAnalysisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SentimentAnalysisServer will
// result in compilation errors.
type UnsafeSentimentAnalysisServer interface {
	mustEmbedUnimplementedSentimentAnalysisServer()
}

func RegisterSentimentAnalysisServer(s grpc.ServiceRegistrar, srv SentimentAnalysisServer) {
	s.RegisterService(&SentimentAnalysis_ServiceDesc, srv)
}

func _SentimentAnalysis_AnalyzeText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentimentAnalysisServer).AnalyzeText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_feedback.SentimentAnalysis/AnalyzeText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentimentAnalysisServer).AnalyzeText(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SentimentAnalysis_ServiceDesc is the grpc.ServiceDesc for SentimentAnalysis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SentimentAnalysis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer_feedback.SentimentAnalysis",
	HandlerType: (*SentimentAnalysisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeText",
			Handler:    _SentimentAnalysis_AnalyzeText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nlp_services.proto",
}

// TopicModellingClient is the client API for TopicModelling service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopicModellingClient interface {
	AnalyzeText(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TopicResponse, error)
}

type topicModellingClient struct {
	cc grpc.ClientConnInterface
}

func NewTopicModellingClient(cc grpc.ClientConnInterface) TopicModellingClient {
	return &topicModellingClient{cc}
}

func (c *topicModellingClient) AnalyzeText(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/customer_feedback.TopicModelling/AnalyzeText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopicModellingServer is the server API for TopicModelling service.
// All implementations must embed UnimplementedTopicModellingServer
// for forward compatibility
type TopicModellingServer interface {
	AnalyzeText(context.Context, *TextRequest) (*TopicResponse, error)
	mustEmbedUnimplementedTopicModellingServer()
}

// UnimplementedTopicModellingServer must be embedded to have forward compatible implementations.
type UnimplementedTopicModellingServer struct {
}

func (UnimplementedTopicModellingServer) AnalyzeText(context.Context, *TextRequest) (*TopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeText not implemented")
}
func (UnimplementedTopicModellingServer) mustEmbedUnimplementedTopicModellingServer() {}

// UnsafeTopicModellingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopicModellingServer will
// result in compilation errors.
type UnsafeTopicModellingServer interface {
	mustEmbedUnimplementedTopicModellingServer()
}

func RegisterTopicModellingServer(s grpc.ServiceRegistrar, srv TopicModellingServer) {
	s.RegisterService(&TopicModelling_ServiceDesc, srv)
}

func _TopicModelling_AnalyzeText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicModellingServer).AnalyzeText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_feedback.TopicModelling/AnalyzeText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicModellingServer).AnalyzeText(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TopicModelling_ServiceDesc is the grpc.ServiceDesc for TopicModelling service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopicModelling_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer_feedback.TopicModelling",
	HandlerType: (*TopicModellingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeText",
			Handler:    _TopicModelling_AnalyzeText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nlp_services.proto",
}
